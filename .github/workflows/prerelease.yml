name: Prerelease Package

on:
  pull_request:
    branches:
      - master

jobs:
  Publish-prerelease:
    if: contains(github.head_ref, 'alpha') || contains(github.head_ref, 'beta') || contains(github.head_ref, 'prerelease')
    runs-on: ubuntu-latest
   
    env:
      DOCKER_USERNAME: cadu1982
      REPO: cadu1982/github-actions
      CAMINHO_PROJETO: ./Groffe.Distancias/Groffe.Distancias.csproj
      # NUGET_SERVER: https://api.nuget.org/v3/index.json 
      DIR: ${{ github.workspace }}/output

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup .NET 5
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
         
    - name: Checkout Current Repository
      uses: actions/checkout@v2
      
    - name: Find the specific suffix to compose the version format
      run: |
        import re
        import os
        github_head_ref = "${{ github.head_ref }}"
        name_branch = github_head_ref.lower()
        suffix_array = re.findall("alpha|beta|prerelease", name_branch)
        env_file = os.getenv('GITHUB_ENV')
        with open(env_file, "a") as myfile:
         myfile.write("PRERELEASE=" + suffix_array[0])
      shell: python
  
    - name: Set prerelease suffix as output
      id: get-prerelease-suffix
      run: echo "::set-output name=prerelease_suffix::$(echo $PRERELEASE)"
      shell: bash
    
    - name: Semantic versioning
      id: versioning
      uses: paulhatch/semantic-version@v4.0.2
      with:
        tag_prefix: ''
        major_pattern: "break:"
        minor_pattern: "feat:"
        patch_pattern: "fix:"
        format: "${major}.${minor}.${patch}-${{ steps.get-prerelease-suffix.outputs.prerelease_suffix }}${increment}"
        
    # - name: Login to DockerHub
    #   uses: docker/login-actions@v1
    #   with: 
    #     username: ${{ env.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Project and Generate Package
      run: dotnet pack ${{ env.CAMINHO_PROJETO }} -c Release -p:PackageVersion=${{ steps.versioning.outputs.version }} -o ${{ env.DIR }}

    - name: Push Package on GitHub Package Registry
      run: dotnet nuget push '${{ env.DIR }}/*.nupkg' --api-key ${{ secrets.MY_TOKEN }} --source github --skip-duplicate    

    - name: Create Release
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
      with:
        tag_name: ${{ steps.versioning.outputs.version }}
        release_name: ${{ steps.versioning.outputs.version }}
        prerelease: true